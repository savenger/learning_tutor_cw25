{
  "name": "Save Weakness",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "weakness",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1280,
        -180
      ],
      "id": "6e61d4f3-7bf1-4152-93b4-85f507cbcdb3",
      "name": "Webhook",
      "webhookId": "f1d5f642-ae61-49d1-b5ee-34ff2bee46a9"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -420,
        60
      ],
      "id": "f3791eab-0c27-4337-ae38-56aa7701a3e4",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "fPQeumCq99mcw6ry",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sseEndpoint": "http://graphiti-mcp:8000/sse",
        "include": "selected",
        "includeTools": [
          "add_memory"
        ]
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1,
      "position": [
        -220,
        60
      ],
      "id": "f2647dfb-d141-4700-89b2-9821be3b65f6",
      "name": "MCP Client",
      "retryOnFail": true
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "You are an assistant that identifies missing or unclear knowledge from a discussion on a specific topic.\nYour task is to analyze the chat and extract what is not known, uncertain, or potentially misunderstood, phrased as explicit knowledge gaps.\n\n\nOnly include genuine gaps in understanding or missing facts. \nDo not list information that is already clearly stated or generally known.\nRespond with short sentences including the gaps and also the context.\n\nExample Input:\n{\"chat\": [\"question\": \"What does a bike consist of?\", \"answer\": \"It has two wheels and a saddle\", \"question\": \"Great, anything else?\" \"answer\": \"A handlebar and a frame\", \"question\": \"Do you know what types of bicycles are there and what they are used for?\", \"answer\": \"city bikes for sustainable mobility and racing bikes for fun\"], \"solution\": \"Bicycles are environmentally friendly means of transportation powered by muscle strength. They typically consist of a frame, two wheels, handlebars, a saddle, and pedals. There are various types of bicycles â€“ including city bikes, mountain bikes, racing bikes, trekking bikes, and e-bikes. They differ in design and intended use.\nBicycles are not only practical for everyday use and commuting to work but also promote health by strengthening the cardiovascular system and muscles. In many cities, they are becoming increasingly important for sustainable mobility.\"}\n\nExample Output:\nPedals are not mentioned as a bicycle component. Types of bikes like mountain bikes, trekking bikes, and e-bikes are missing. The health benefits of cycling (e.g., cardiovascular and muscular improvements) are not mentioned. The role of bikes in everyday commuting is not covered. No mention of bikes being powered by muscle strength. Bicycles' increasing importance in urban sustainable mobility is only partly addressed.\nThe system asks what a bike consists of, and the answer includes two wheels, a saddle, handlebars, and a frame. When asked if there's anything else, no additional parts are mentioned. The system then asks about types of bicycles and their uses, and the response mentions city bikes for sustainable mobility and racing bikes for fun.\n",
              "role": "system"
            },
            {
              "content": "={{\n$json.body.messages\n.reduce((acc, msg, index, arr) => {\n    if (msg.role === \"assistant\" && arr[index + 1]?.role === \"user\") {\n      acc.push(\n        `Question: ${msg.content}\\nAnswer: ${arr[index + 1].content}`\n      );\n    }\n    return acc;\n  }, [])\n  .join(\"\\n\\n\")\n}}\n\n{{ $json.body.solution }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -760,
        -180
      ],
      "id": "6976d08f-edfa-42c2-bf8b-f5eec26fbe70",
      "name": "Knowledge gap identification",
      "credentials": {
        "openAiApi": {
          "id": "fPQeumCq99mcw6ry",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7d69cf14-0d18-4869-ab65-d330460eedda",
              "name": "flashcard_id",
              "value": "={{ $json.body.id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -360,
        320
      ],
      "id": "5dc7107d-aab1-41ab-87d9-dba74d39ed3c",
      "name": "Extract id"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.content }}",
        "options": {
          "systemMessage": "Store the information about all of the users misconceptions and knowledge gaps in a knowledge graph that represents the users misconceptions. Always set the episode_body as an unstructured text. For each gap use a separate function call. "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -400,
        -180
      ],
      "id": "843d56c2-85ea-458b-9d5c-5a8941bb14d7",
      "name": "Knowledge gap storage"
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "Flashcards",
          "mode": "list",
          "cachedResultName": "Flashcards"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Extract id').item.json.flashcard_id }}",
            "seen": true,
            "score": "={{ $json.data[0].message.content.score }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "question",
              "displayName": "question",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "answer",
              "displayName": "answer",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "deckId",
              "displayName": "deckId",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "seen",
              "displayName": "seen",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "score",
              "displayName": "score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "createdAt",
              "displayName": "createdAt",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "updatedAt",
              "displayName": "updatedAt",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        840,
        -160
      ],
      "id": "06a96ca3-47a9-4f66-9a3d-aceaa2e257a3",
      "name": "Update rows in a table",
      "credentials": {
        "postgres": {
          "id": "IWgQcsY8lcgKgGmd",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        300,
        -160
      ],
      "id": "72bd5775-d2f6-46dc-ac65-70db34e4bd40",
      "name": "Merge",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "Grade the answers of the user in school nodes (1-6 with 1 being the best) regarding the mentioning of knowledge compared to the perfect solution.\n\nALWAYS OUTPUT A JSON LIKE THIS {\"score\": INT}",
              "role": "system"
            },
            {
              "content": "=CHAT\n{{\n$json.body.messages\n  .reduce((acc, msg, index, arr) => {\n    if (msg.role === \"assistant\" && arr[index + 1]?.role === \"user\") {\n      acc.push(\n        `Question: ${msg.content}\\nAnswer: ${arr[index + 1].content}`\n      );\n    }\n    return acc;\n  }, [])\n  .join(\"\\n\\n\")\n}}\n\nPERFECT SOLUTION\n{{ $json.body.solution }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -760,
        -420
      ],
      "id": "1105719d-ab90-497d-b786-fd61e2c8921d",
      "name": "Grade answers",
      "credentials": {
        "openAiApi": {
          "id": "fPQeumCq99mcw6ry",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        540,
        -160
      ],
      "id": "189fbbf7-805b-4d0d-8ecb-0a65d60ce695",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "respondWith": "noData",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1120,
        -160
      ],
      "id": "abe89014-c989-437e-9bfc-2fd388a5428a",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "body": {
            "id": "1",
            "messages": [
              {
                "role": "assistant",
                "content": "Iâ€™ve heard of Pandas in Python. Is it about animals?",
                "timestamp": "2025-07-10T09:00:34.888Z"
              },
              {
                "role": "user",
                "content": "No, itâ€™s a library used for data analysis.",
                "timestamp": "2025-07-10T09:00:40.888Z"
              },
              {
                "role": "assistant",
                "content": "Oh, what can you do with it?",
                "timestamp": "2025-07-10T09:00:46.888Z"
              },
              {
                "role": "user",
                "content": "You can load, manipulate, and analyze tabular data like spreadsheets.",
                "timestamp": "2025-07-10T09:00:52.888Z"
              },
              {
                "role": "assistant",
                "content": "Sounds cool. Is it hard to use?",
                "timestamp": "2025-07-10T09:00:58.888Z"
              },
              {
                "role": "user",
                "content": "Not really. Itâ€™s designed to be intuitive. You mostly work with DataFrames.",
                "timestamp": "2025-07-10T09:01:05.888Z"
              },
              {
                "role": "assistant",
                "content": "Whatâ€™s a DataFrame?",
                "timestamp": "2025-07-10T09:01:10.888Z"
              },
              {
                "role": "user",
                "content": "Itâ€™s like a table with rows and columns. Similar to an Excel sheet.",
                "timestamp": "2025-07-10T09:01:12.888Z"
              }
            ],
            "solution": "Pandas is a powerful open-source library in Python used for data manipulation and analysis. Its core data structures are Series (for one-dimensional data) and DataFrame (for two-dimensional tabular data). Pandas allows users to easily read data from various sources like CSV files or Excel spreadsheets, clean and transform it, and perform statistical analyses. Even users with little programming experience can use Pandas effectively thanks to its clear syntax and documentation. Itâ€™s widely used in data science, finance, and research for tasks like filtering, grouping, aggregating, and visualizing data."
          }
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract id",
            "type": "main",
            "index": 0
          },
          {
            "node": "Grade answers",
            "type": "main",
            "index": 0
          },
          {
            "node": "Knowledge gap identification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Knowledge gap storage",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "Knowledge gap storage",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Knowledge gap identification": {
      "main": [
        [
          {
            "node": "Knowledge gap storage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Knowledge gap storage": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Grade answers": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Update rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract id": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Update rows in a table": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ea3fa4ec-a24e-4c00-b336-adba1333ce3d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "58372434a2f72b44f89835f77ca2cc9d557f4359b8fe4e69017475e11efa5fab"
  },
  "id": "K5KYvavbMkG0Hc6c",
  "tags": []
}