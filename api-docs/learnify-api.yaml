openapi: 3.0.3
info:
  title: Flash Card Learning Platform API
  description: API for evaluating and storing flash card learning sessions
  version: 1.0.0
  contact:
    name: Flash Card Learning Platform
servers:
  - url: http://localhost:5678/webhook
    description: Development server

paths:
  /decks:
    get:
      summary: Get all decks
      description: Returns an array of all available decks (without cards)
      operationId: getDecks
      responses:
        '200':
          description: List of decks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeckSummary'
              examples:
                sample_decks:
                  summary: Sample decks response
                  value:
                    - id: 1
                      name: "Geography"
                    - id: 2
                      name: "History"
        '500':
          description: Internal server error
    post:
      summary: Create a new deck with cards
      description: Creates a new deck and its associated cards, returning the deck ID
      operationId: createDeck
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deck'
            examples:
              sample_deck:
                summary: Sample deck creation
                description: Example of creating a geography deck
                value:
                  name: "Geography"
                  description: "Learn about world capitals and geography facts"
                  cards:
                    - question: "What is the capital of France?"
                      answer: "Paris"
                    - question: "What is the largest country in the world?"
                      answer: "Russia"
                    - question: "What is the capital of Japan?"
                      answer: "Tokyo"
      responses:
        '201':
          description: Deck created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deck_id:
                    type: integer
                    description: The ID of the newly created deck
                    example: 123
        '400':
          description: Bad request - invalid deck data
        '500':
          description: Internal server error

  /decks/{deck_id}:
    get:
      summary: Get a specific deck by ID
      description: Returns a specific deck with all its cards
      operationId: getDeck
      parameters:
        - name: deck_id
          in: path
          required: true
          description: The ID of the deck to retrieve
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Deck retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
              examples:
                sample_deck:
                  summary: Sample deck response
                  value:
                    id: 1
                    name: "Geography"
                    description: "Learn about world capitals and geography facts"
                    cards:
                      - id: 1
                        question: "What is the capital of France?"
                        answer: "Paris"
                        seen: false
                        score: null
                      - id: 2
                        question: "What is the largest country in the world?"
                        answer: "Russia"
                        seen: true
                        score: 90
        '404':
          description: Deck not found
        '400':
          description: Bad request - invalid deck ID
        '500':
          description: Internal server error

  /decks/{deck_id}/cards:
    get:
      summary: Draw a random card from a deck
      description: Returns a random card from the specified deck
      operationId: drawCard
      parameters:
        - name: deck_id
          in: path
          required: true
          description: The ID of the deck to draw from
          schema:
            type: integer
          example: 123
        - name: draw
          in: query
          required: false
          description: Flag to indicate drawing a random card (implicitly true when present)
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Card drawn successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
              examples:
                sample_card:
                  summary: Sample card response
                  value:
                    id: 1
                    question: "What is the capital of France?"
                    answer: "Paris"
                    seen: false
                    score: null
        '404':
          description: Deck not found
        '400':
          description: Bad request - invalid deck ID
        '500':
          description: Internal server error

  /evaluate:
    post:
      summary: Evaluate user's answer against the correct answer
      description: Evaluates the user's answer and returns either a success message or a hint for improvement
      operationId: evaluate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/History'
            examples:
              success_case:
                summary: Success case example
                description: Example where user eventually gets the correct answer after receiving a hint
                value:
                  messages:
                    - role: assistant
                      type: question
                      message: What is the capital of France?
                    - role: assistant
                      type: solution
                      message: The correct answer is Paris.
                    - role: user
                      type: answer
                      message: Kiel
                    - role: assistant
                      type: hint
                      message: Think of the city known as the 'City of Light' and famous for the Eiffel Tower.
                    - role: user
                      type: answer
                      message: Paris
      responses:
        '200':
          description: Evaluation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationResult'
              examples:
                success:
                  summary: Success response
                  value:
                    role: assistant
                    type: success
                    message: Correct!
                hint:
                  summary: Hint response
                  value:
                    role: assistant
                    type: hint
                    message: Think of the city known as the 'City of Light' and famous for the Eiffel Tower.
        '400':
          description: Bad request - invalid history format
        '500':
          description: Internal server error

  /learning-history:
    post:
      summary: Store the complete learning session history
      description: Stores the entire conversation history for the learning session
      operationId: storeLearningHistory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/History'
            examples:
              completed_session:
                summary: Completed learning session
                description: Example of a completed learning session with alternating assistant/user messages
                value:
                  messages:
                    - role: assistant
                      type: question
                      message: What is the capital of France?
                    - role: assistant
                      type: solution
                      message: The correct answer is Paris.
                    - role: user
                      type: answer
                      message: Kiel
                    - role: assistant
                      type: hint
                      message: Think of the city known as the 'City of Light' and famous for the Eiffel Tower.
                    - role: user
                      type: answer
                      message: Paris
                    - role: assistant
                      type: success
                      message: Correct! Paris is the capital of France.
      responses:
        '200':
          description: History stored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "History stored successfully"
                  sessionId:
                    type: string
                    format: uuid
                    example: "123e4567-e89b-12d3-a456-426614174000"
        '400':
          description: Bad request - invalid history format
        '500':
          description: Internal server error

components:
  schemas:
    DeckSummary:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: The unique identifier for the deck
          example: 1
        name:
          type: string
          description: The name of the deck
          example: "Geography"

    Deck:
      type: object
      required:
        - name
        - cards
      properties:
        id:
          type: integer
          description: The unique identifier for the deck (optional for creation)
          example: 1
        name:
          type: string
          description: The name of the deck
          example: "Geography"
        description:
          type: string
          description: A description of the deck content
          example: "Learn about world capitals and geography facts"
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
          description: Array of cards in the deck
          minItems: 1

    Card:
      type: object
      required:
        - question
        - answer
      properties:
        id:
          type: integer
          description: The unique identifier for the card (optional for creation)
          example: 1
        question:
          type: string
          description: The question text
          example: "What is the capital of France?"
        answer:
          type: string
          description: The answer text
          example: "Paris"
        seen:
          type: boolean
          description: Whether the card has been seen by the user
          default: false
          example: false
        score:
          type: integer
          nullable: true
          description: The user's score for this card (can be null if not yet scored)
          example: 85

    History:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
          description: Array of conversation messages. The conversation always starts with an assistant question, followed by alternating user answers and assistant responses (hints or success messages).
          minItems: 1

    Message:
      type: object
      required:
        - role
        - type
        - message
      properties:
        role:
          type: string
          enum: [assistant, user]
          description: Role identifier for the message sender. Assistant always starts with a question, then alternates with user responses.
        type:
          type: string
          enum: [question, solution, answer, hint, success]
          description: Type of message content. Assistant messages can be 'question', 'hint', 'success', or 'solution'. User messages are always 'answer'.
        message:
          type: string
          description: The message content

    EvaluationResult:
      type: object
      required:
        - role
        - type
        - message
      properties:
        role:
          type: string
          enum: [assistant]
          description: Role identifier for the evaluation result
          example: assistant
        type:
          type: string
          enum: [success, hint]
          description: The type of evaluation result
        message:
          type: string
          description: The message content of the evaluation result
