services:

  frontend:
    build: frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend_importer:
    build: frontend_importer
    ports:
      - "5173:5173"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: backend
    ports:
      - "3001:3000"
    environment:
      - PORT=3000
      - POSTGRES_HOST=psql_backend
      - POSTGRES_PORT=5432
      - POSTGRES_USER=backend
      - POSTGRES_PASSWORD=backend
      - POSTGRES_DB=backend
    depends_on:
      psql_backend:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules # Prevent host node_modules from overwriting container's
    command: npm start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "5678:5678"
    environment:
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_HOST=psql_n8n
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_SCHEMA=public
      - DB_POSTGRESDB_PASSWORD=n8n
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE}
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - graphiti-mcp

  # graph:
  #   image: zepai/graphiti:latest
  #   ports:
  #       - "8000:8000"
    
  #   environment:
  #       - OPENAI_API_KEY=${OPENAI_API_KEY}
  #       - NEO4J_URI=bolt://neo4j:${NEO4J_PORT}
  #       - NEO4J_USER=${NEO4J_USER}
  #       - NEO4J_PASSWORD=${NEO4J_PASSWORD}
  #   depends_on:
  #     - neo4j
  
  graphiti-mcp:
    image: zepai/knowledge-graph-mcp:latest
    depends_on:
      - neo4j
    environment:
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-demodemo}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MODEL_NAME=${MODEL_NAME}
      - PATH=/root/.local/bin:${PATH}
      - SEMAPHORE_LIMIT=${SEMAPHORE_LIMIT:-10}
    ports:
      - "8000:8000" # Expose the MCP server via HTTP for SSE transport
    command: ["uv", "run", "graphiti_mcp_server.py", "--transport", "sse"]
  
  search-mcp:
    build: search_mcp
    environment:
      - SERPER_KEY=${SERPER_KEY}

  neo4j:
    image: neo4j:5.26.0
    
    ports:
        - "7474:7474"  # HTTP
        - "${NEO4J_PORT}:${NEO4J_PORT}"  # Bolt
    volumes:
        - neo4j_data:/data
    environment:
        - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
  
  psql_n8n:
    image: postgres
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=n8n
    volumes: 
      - psql_n8n:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  
  psql_backend:
    image: postgres:14
    environment:
      - POSTGRES_DB=backend
      - POSTGRES_USER=backend
      - POSTGRES_PASSWORD=backend
    volumes: 
      - psql_backend:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U backend -d backend"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  neo4j_data:
  n8n_data:
  n8n_shared_files:
  psql_n8n:
  psql_backend: