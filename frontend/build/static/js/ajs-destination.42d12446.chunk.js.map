{"version":3,"file":"static/js/ajs-destination.42d12446.chunk.js","mappings":"2UAYA,SAASA,EAAcC,GACrB,OAAOA,EAAKC,cAAcC,QAAQ,IAAK,IAAIA,QAAQ,OAAQ,IAC7D,CAEA,SAASC,EAAkBC,EAAkBC,GAC3C,YAD2C,IAAAA,IAAAA,GAAA,GACpCA,EAAYC,KAAKF,GAAUF,QAAQ,KAAM,SAAMK,CACxD,CAmDM,SAAgBC,EACpBC,EACAT,EACAU,EACAL,G,oHAEMD,EAAWL,EAAcC,GACzBW,EAAqBR,EAAkBC,EAAUC,GACjDO,GAAOC,EAAAA,EAAAA,MAEPC,EAAW,GAAAC,OAAGH,EAAI,kBAAAG,OACJ,OAAlBJ,QAAkB,IAAlBA,EAAAA,EAAsBP,EAAQ,KAAAW,OAC5BL,EAAO,KAAAK,OAAsB,OAAlBJ,QAAkB,IAAlBA,EAAAA,EAAsBP,EAAQ,kB,iBAG3C,O,sBAAA,IAAMY,EAAAA,EAAAA,GAAWF,I,cAAjBG,EAAAC,OAtDJ,SAA2BJ,EAAkBL,EAAcT,G,QACzD,IACS,IAAAmB,GACsD,QAA3DC,EAAmB,QAAnBH,EAAM,OAANI,aAAM,IAANA,YAAM,EAANA,OAAQC,mBAAW,IAAAL,OAAA,EAAAA,EAAEM,iBAAiBT,EAAU,mBAAW,IAAAM,EAAAA,EAAI,IAAE,GAEnED,GACEV,EAAIe,MAAMC,MAAM,0BAA2BC,KAAKC,MAAMR,EAAOS,WAASC,EAAAA,EAAAA,IAAA,CACpE7B,GACImB,EAAOS,SAAW,IAAM,CAAC,UAAY,IAAG,G,CAEhD,MAAOE,GACP,CAEJ,CA0CIC,CAAkBjB,EAAUL,EAAKT,G,aAGjC,M,WADAS,EAAIe,MAAMC,MAAM,2BAA4B,EAAG,CAAC,UAAAV,OAAUf,GAAQ,WAC5DgC,E,OAKR,OADMC,EAAiBZ,OAAO,GAAAN,OAAGX,EAAQ,SACzC,GAAM8B,QAAQC,IAAIF,EAAKG,IAAI,SAACC,GAAQ,OAAArB,EAAAA,EAAAA,GAAWJ,EAAOyB,EAAM,MAAxB,K,OAKpC,OALApB,EAAAC,OAGAG,OAAO,GAAAN,OAAGX,EAAQ,aAEX,CAAP,EAAOiB,OAEL,GAAAN,OAAGX,EAAQ,iB,mBCjGFkC,EAA2B,SACtCtC,EACAuC,G,MAEQC,EAA0CD,EAAmBC,KAAvDC,EAAoCF,EAAmBE,eAAvCC,EAAoBH,EAAmBG,gBAG/DC,EACe,cAAnBF,IACU,YAATD,IAAqD,QAA/BvB,EAAe,OAAfyB,QAAe,IAAfA,OAAe,EAAfA,EAAiBE,sBAAc,IAAA3B,OAAA,EAAAA,EAAE4B,SAAS,aAKnE,OAAQ7C,EAAK8C,WAAW,YAAuB,aAAT9C,GAAuB2C,CAC/D,EAEaI,EAAwB,SACnCC,EACAC,GAEA,IAAMC,GACiB,IAArBD,EAAaE,UAAmD5C,IAAlC0C,EAAaD,GAE7C,OAAyC,IAAlCC,EAAaD,IAA8BE,CACpD,E,oBCSA,SAAeE,EACbC,EACAC,G,iHAIA,OAFMC,EAAyB,IAE3BC,EAAAA,EAAAA,KACK,CAAP,EAAOF,GAGT,IAAMG,EAAAA,EAAAA,GACJ,WAAM,OAAAH,EAAMI,OAAS,IAAKC,EAAAA,EAAAA,IAApB,EACN,kBAAAC,EAAAA,EAAAA,IAAAC,OAAA,oB,+DAEE,OADMpD,EAAM6C,EAAMQ,OAKH,IAAMC,EAAAA,EAAAA,GAAQtD,EAAK4C,IAHhC,I,cAGIW,EAAS/C,EAAAC,OACC8C,aAAkBC,EAAAA,GAEhCV,EAAYW,KAAKzD,G,mBAOvB,OAlBAQ,EAAAC,OAiBAqC,EAAYnB,IAAI,SAAC+B,GAAW,OAAAb,EAAMc,gBAAgBD,EAAtB,GACrB,CAAP,EAAOb,G,KAGT,IAAAe,EAAA,WAoBE,SAAAA,EACErE,EACAU,EACA4D,EACAC,EACAC,EACAC,QAFA,IAAAF,IAAAA,EAAA,IAJF,IAAAV,EAAA,KAhBA,KAAAW,QAAuB,CAAC,EACf,KAAAhC,KAAO,cAChB,KAAAkC,WAA8C,GAKtC,KAAAC,mBAAoBC,EAAAA,EAAAA,KAO5B,KAAAC,UAAW,EAUTC,KAAK9E,KAAOA,EACZ8E,KAAKpE,QAAUA,EACfoE,KAAKP,UAAQQ,EAAAA,EAAAA,IAAA,GAAQR,GACrBO,KAAKE,yBAA2BR,EAAQQ,2BAA4B,EACpEF,KAAKL,kBAAoBA,EAIrBK,KAAKP,SAAe,MAA+B,YAA1BO,KAAKP,SAAe,aACxCO,KAAKP,SAAe,KAG7BO,KAAKH,kBAAkBM,QAAQC,KAC7B,SAACC,GAAkB,OAACtB,EAAKuB,aAAeD,CAArB,EACnB,WAAO,GAGTL,KAAKN,QAAUA,EACfM,KAAKO,OAASb,EAAQc,yBAClB,IAAIC,EAAAA,EAAc,EAAG,IACrB,IAAIC,EAAAA,EAAuB,EAAG,GAAAzE,OAAGuD,EAAQ,UAAAvD,OAASf,IAEtD8E,KAAKW,eACP,CAmNF,OAjNEpB,EAAAqB,UAAAC,SAAA,WACE,QAASb,KAAKc,MAChB,EAEAvB,EAAAqB,UAAAG,MAAA,eAAAhC,EAAA,KACE,OAAOiB,KAAKH,kBAAkBM,QAAQC,KACpC,eAAAjE,EAAM,OAAY,QAAZA,EAAA4C,EAAKiC,eAAO,IAAA7E,EAAAA,EAAIiB,QAAQ6D,SAAS,EAE3C,EAEM1B,EAAAqB,UAAAM,KAAN,SAAWvF,EAAcwF,G,yHACvB,OAAInB,KAAKc,aAA2BrF,IAAjBuE,KAAKgB,QACtB,IAIsB,Q,EAAtBhB,KAAKL,yBAAiB,IAAAxD,EAAA,O,kBACrB,SAAMT,EACLC,EACAqE,KAAK9E,KACL8E,KAAKpE,QACLoE,KAAKN,QAAQnE,Y,OAJfe,EAAC8E,EAAAhF,O,iBAFGuD,EAAiBrD,EASvB0D,KAAKqB,YFpGH,SACJ1B,EACAlC,EACA0D,GAEA,IAAIG,EAEA,gBAAiB3B,GAMnBA,EALsB,CACpB4B,KAAM,WAAY,OAAAJ,EAAkBI,MAAlB,EAClBC,eAAgB,WAAa,IAI/BF,EAAiB3B,EAAkB8B,aAEnCH,EAAiB3B,EAGnB,IAAM0B,EAAc,IAAIC,EAAe7D,GAEvC,OADA4D,EAAYK,UAAYP,EACjBE,CACT,CE8EuBM,CACjBhC,EACAK,KAAKP,SACL0B,GAGFnB,KAAKgB,QAAU,IAAI5D,QAAQ,SAAC6D,GAM1BlC,EAAKsC,YAAaO,KAAK,QALL,WAChB7C,EAAK+B,QAAS,EACdG,GAAQ,EACV,EAGF,GAEAjB,KAAKqB,YAAaQ,GAAG,aAAc,WACjC9C,EAAKc,kBAAkBoB,SAAQ,EACjC,GAEA,KACEa,EAAAA,EAAAA,GAAwBnG,EAAK,CAC3BuC,gBAAiB8B,KAAK9E,KACtB6G,WAAY,aACZrE,KAAM,YAERsC,KAAKqB,YAAYW,Y,CACjB,MAAOC,GAQP,MAPAH,EAAAA,EAAAA,GAAwBnG,EAAK,CAC3BuC,gBAAiB8B,KAAK9E,KACtB6G,WAAY,aACZrE,KAAM,UACNwE,UAAU,IAEZlC,KAAKH,kBAAkBoB,SAAQ,GACzBgB,C,iBAIV1C,EAAAqB,UAAAuB,OAAA,SAAOC,EAAeC,GACpB,OFhFE,SACJnH,EACAU,EACAL,G,yFAUA,OARMO,GAAOC,EAAAA,EAAAA,MACPT,EAAWL,EAAcC,GACzBW,EAAqBR,EAAkBH,EAAMK,GAE7CS,EAAW,GAAAC,OAAGH,EAAI,kBAAAG,OACJ,OAAlBJ,QAAkB,IAAlBA,EAAAA,EAAsBP,EAAQ,KAAAW,OAC5BL,EAAO,KAAAK,OAAsB,OAAlBJ,QAAkB,IAAlBA,EAAAA,EAAsBP,EAAQ,kBAEtC,CAAP,GAAOgH,EAAAA,EAAAA,GAAatG,G,KEmEXuG,CAAkBvC,KAAK9E,KAAM8E,KAAKpE,QAASoE,KAAKN,QAAQnE,UACjE,EAEAgE,EAAAqB,UAAA4B,cAAA,W,UAAcC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAA/D,OAAA8D,IAAAD,EAAAC,GAAAC,UAAAD,GACZ1C,KAAKJ,YAAazD,EAAA6D,KAAKJ,YAAW3D,OAAM2G,MAAAzG,EAAIsG,EAC9C,EAEAlD,EAAAqB,UAAAiC,aAAA,SAAalH,GACX,MAEqB,SAAnBA,EAAImH,MAAMpF,QACTgB,EAAAA,EAAAA,OAA+B,IAAhBsB,KAAKc,SAAyC,IAAtBd,KAAKM,aAEjD,EAEcf,EAAAqB,UAAAmC,KAAd,SACEpH,EACAqH,EACAC,G,4HAEA,OAAIjD,KAAK6C,aAAalH,IACpBqE,KAAKO,OAAOnB,KAAKzD,GACjBqE,KAAKW,gBACE,CAAP,EAAOhF,KAGHuH,EAAyB,QAAlB5G,EAAY,QAAZH,EAAA6D,KAAKN,eAAO,IAAAvD,OAAA,EAAAA,EAAE+G,YAAI,IAAA5G,OAAA,EAAAA,EAAE6G,MAC3BC,EAAKzH,EAAImH,MAAMA,MAEjBI,GAAQE,GAAoB,eAAdpD,KAAK9E,OAEfmI,EAAYH,EAAKE,IAClBE,EAAAA,EAAAA,GAAmBJ,EAAMG,GAc5B1H,EAAI4H,YAAY,gBAActD,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,IAAA,GACzBtE,EAAImH,MAAM3E,cACD,OAATkF,QAAS,IAATA,OAAS,EAATA,EAAWlF,gBAfhBxC,EAAI4H,YAAY,gBAActD,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,IAAA,GACzBtE,EAAImH,MAAM3E,cAAY,CACzBE,KAAK,EACL,cAAc,KAEhB1C,EAAI6H,OACF,IAAIC,EAAAA,EAAmB,CACrBC,OAAO,EACPC,OAAQ,SAAA1H,OAASmH,EAAE,8BAAAnH,OAA6B+D,KAAK9E,KAAI,qBACzDwC,KAAM,uBAUC,OAAT2F,QAAS,IAATA,OAAS,EAATA,EAAWO,WAAmD,KAA/B,OAATP,QAAS,IAATA,OAAS,EAATA,EAAWlF,aAAc6B,KAAK9E,QACtDS,EAAI6H,OACF,IAAIC,EAAAA,EAAmB,CACrBC,OAAO,EACPC,OAAQ,SAAA1H,OAASmH,EAAE,8BAAAnH,OAA6B+D,KAAK9E,KAAI,qBACzDwC,KAAM,sBAMU,IAAMmG,EAAAA,EAAAA,4BAC5B7D,KAAK9E,KACLS,EAAImH,MACJ9C,KAAKJ,c,OAGP,GAAwB,QANlBkE,EAAkB1C,EAAAhF,QAOtB,MAAO,CAAP,EAAOT,GAGHmH,EAAQ,IAAIE,EAAIc,EAAiB,CACrCC,UAAW/D,KAAKE,4BAGlB4B,EAAAA,EAAAA,GAAwBnG,EAAK,CAC3BuC,gBAAiB8B,KAAK9E,KACtB6G,WAAYkB,EACZvF,KAAM,Y,8CAIFsC,KAAKqB,YACP,GAAMrB,KAAKqB,YAAa2C,OAAOC,KAAKjE,KAAKqB,YAAa4B,EAAWH,IAD/D,M,OACF1B,EAAAhF,O,oCASF,M,YANA0F,EAAAA,EAAAA,GAAwBnG,EAAK,CAC3BuC,gBAAiB8B,KAAK9E,KACtB6G,WAAYkB,EACZvF,KAAM,UACNwE,UAAU,IAENhF,E,OAGR,MAAO,CAAP,EAAOvB,G,MAGH4D,EAAAqB,UAAAuC,MAAN,SAAYxH,G,6EACV,MAAO,CAAP,EAAOqE,KAAK+C,KAAKpH,EAAKuI,EAAAA,MAA2B,S,MAG7C3E,EAAAqB,UAAAuD,KAAN,SAAWxI,G,0GAKT,OAJoB,QAAhBQ,EAAA6D,KAAKqB,mBAAW,IAAAlF,OAAA,EAAAA,EAAEiI,oBAAqBpE,KAAKM,cAC9CN,KAAKqB,YAAYW,aAGnB,GAAMhC,KAAKH,kBAAkBM,S,OAC7B,OADA7D,EAAAF,OACO,CAAP,EAAO4D,KAAK+C,KAAKpH,EAAK0I,EAAAA,KAAyB,S,MAG3C9E,EAAAqB,UAAA0D,SAAN,SAAe3I,G,6EACb,MAAO,CAAP,EAAOqE,KAAK+C,KAAKpH,EAAK4I,EAAAA,SAAiC,Y,MAGnDhF,EAAAqB,UAAA4D,MAAN,SAAY7I,G,6EACV,MAAO,CAAP,EAAOqE,KAAK+C,KAAKpH,EAAK8I,EAAAA,MAA2B,S,MAG7ClF,EAAAqB,UAAA8D,MAAN,SAAY/I,G,6EACV,MAAO,CAAP,EAAOqE,KAAK+C,KAAKpH,EAAKgJ,EAAAA,MAA2B,S,MAG3CpF,EAAAqB,UAAAD,cAAR,eAAA5B,EAAA,KACMiB,KAAKD,UAKT6E,WAAW,kBAAA9F,EAAAA,EAAAA,IAAAC,OAAA,oB,6DACT,OAAIL,EAAAA,EAAAA,OAA+B,IAAhBsB,KAAKc,SAAyC,IAAtBd,KAAKM,cAC9CN,KAAKW,gBACL,MAGFX,KAAKD,UAAW,EAChB5D,EAAA6D,KAAc,GAAM1B,EAAW0B,KAAMA,KAAKO,U,cAA1CpE,EAAKoE,OAASjE,EAAAF,OACd4D,KAAKD,UAAW,EAEZC,KAAKO,OAAOsE,KAAO,GACrB7E,KAAKW,gB,UAEU,IAAhB/D,KAAKkI,SACV,EACFvF,CAAA,CAtQA,GAwQM,SAAUwF,EACdvF,EACAC,EACAtB,EACAuB,EACAsF,EACAC,G,QAEA,QALA,IAAA9G,IAAAA,EAAA,SACA,IAAAuB,IAAAA,EAAA,KAIIwF,EAAAA,EAAAA,KACF,MAAO,GAGLzF,EAASyD,QACXxD,EAAiB,OAAPA,QAAO,IAAPA,EAAAA,EAAW,CAAC,GACdwD,KAAOzD,EAASyD,MAG1B,IAAMiC,EAAwD,QAAzC7I,EAA2B,QAA3BH,EAAAsD,EAAS2F,0BAAkB,IAAAjJ,OAAA,EAAAA,EAAEgJ,oBAAY,IAAA7I,EAAAA,EAAI,GAC5D+I,EAA2B5F,EAAStB,aACpCmH,EAA0B5F,EAAQvB,aAElCoH,GAAqBC,EAAAA,EAAAA,GAAc/F,EAAiB,OAAPC,QAAO,IAAPA,EAAAA,EAAW,CAAC,GAKzD+F,EAAkD,OAAxBR,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0BS,OACxD,SAACC,EAAKhG,G,MAAsB,OAAAM,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,IAAC,CAAC,EACzB0F,KAAGxJ,EAAA,IFpVN,SACJwD,GAEA,OACE,gBAAiBA,EACbA,EAAkB8B,YAClB9B,GACJiB,UAAU1F,IACd,CE6UO0K,CAAiCjG,IAAqBA,EAAiBxD,GAF9C,EAI5B,CAAC,GAGG0J,EAA0B,IAAIC,KAAG/I,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,IAAC,GAEnCgJ,OAAOC,KAAKX,GAA0BY,OAAO,SAAC/K,GAC/C,OAAAsC,EAAyBtC,EAAMmK,EAAyBnK,GAAxD,IACD,GAGE6K,OAAOC,KAAKP,GAA2B,CAAC,GAAGQ,OAC5C,SAAC/K,GACC,OAAAgL,EAAAA,EAAAA,IAAcb,EAAyBnK,MACvCgL,EAAAA,EAAAA,IAAqC,OAAvBZ,QAAuB,IAAvBA,OAAuB,EAAvBA,EAA0BpK,GADxC,IAEH,IAGH,OAAOiL,MAAMC,KAAKP,GACfI,OAAO,SAAC/K,GAAS,OAACmL,EAAsBnL,EAAMiD,EAA7B,GACjBb,IAAI,SAACpC,GACJ,IACMU,EFxQN,SACJ0K,G,YAEA,OAE6C,QAD3CC,EAA4C,QAA5CjK,EAAkC,QAAlCH,EAAiB,OAAjBmK,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmB1I,uBAAe,IAAAzB,OAAA,EAAAA,EAAEqK,gBAAQ,IAAAlK,EAAAA,EACV,QAAlC8E,EAAiB,OAAjBkF,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmB1I,uBAAe,IAAAwD,OAAA,EAAAA,EAAExF,eAAO,IAAA2K,EAAAA,EAC3C,QAEJ,CEgQsBE,CADYpB,EAAyBnK,IAE/CwL,EAAc,IAAInH,EACtBrE,EACAU,EACA4D,EACA+F,EAAmBrK,GACnBwE,EACuB,OAAvB+F,QAAuB,IAAvBA,OAAuB,EAAvBA,EAA0BvK,IAU5B,OAPgBiK,EAAac,OAC3B,SAACU,GAAS,OAAAA,EAAKC,kBAAoB1L,CAAzB,GAEA0D,OAAS,GAAKoG,GACxB0B,EAAYlE,cAAcwC,GAGrB0B,CACT,EACJ,C,iBC3YM,SAAUpD,EACdJ,EACAG,G,QAGA,MAAkC,mBAAd,OAATA,QAAS,IAATA,OAAS,EAATA,EAAWO,SACbP,EAAUO,QAIY,QAAxBtH,EAAe,QAAfH,EAAI,OAAJ+G,QAAI,IAAJA,OAAI,EAAJA,EAAM2D,iBAAS,IAAA1K,OAAA,EAAAA,EAAEyH,eAAO,IAAAtH,GAAAA,CACjC,C","sources":["../node_modules/@segment/analytics-next/src/plugins/ajs-destination/loader.ts","../node_modules/@segment/analytics-next/src/plugins/ajs-destination/utils.ts","../node_modules/@segment/analytics-next/src/plugins/ajs-destination/index.ts","../node_modules/@segment/analytics-next/src/lib/is-plan-event-enabled.ts"],"sourcesContent":["import { Analytics } from '../../core/analytics'\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn'\nimport { Context } from '../../core/context'\nimport { User } from '../../core/user'\nimport { loadScript, unloadScript } from '../../lib/load-script'\nimport {\n  LegacyIntegration,\n  ClassicIntegrationBuilder,\n  ClassicIntegrationSource,\n} from './types'\nimport { RemoteIntegrationSettings } from '../../browser/settings'\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase().replace('.', '').replace(/\\s+/g, '-')\n}\n\nfunction obfuscatePathName(pathName: string, obfuscate = false): string | void {\n  return obfuscate ? btoa(pathName).replace(/=/g, '') : undefined\n}\n\nexport function resolveIntegrationNameFromSource(\n  integrationSource: ClassicIntegrationSource\n) {\n  return (\n    'Integration' in integrationSource\n      ? integrationSource.Integration\n      : integrationSource\n  ).prototype.name\n}\n\nfunction recordLoadMetrics(fullPath: string, ctx: Context, name: string): void {\n  try {\n    const [metric] =\n      window?.performance?.getEntriesByName(fullPath, 'resource') ?? []\n    // we assume everything that took under 100ms is cached\n    metric &&\n      ctx.stats.gauge('legacy_destination_time', Math.round(metric.duration), [\n        name,\n        ...(metric.duration < 100 ? ['cached'] : []),\n      ])\n  } catch (_) {\n    // not available\n  }\n}\n\nexport function buildIntegration(\n  integrationSource: ClassicIntegrationSource,\n  integrationSettings: { [key: string]: any },\n  analyticsInstance: Analytics\n): LegacyIntegration {\n  let integrationCtr: ClassicIntegrationBuilder\n  // GA and Appcues use a different interface to instantiating integrations\n  if ('Integration' in integrationSource) {\n    const analyticsStub = {\n      user: (): User => analyticsInstance.user(),\n      addIntegration: (): void => {},\n    }\n\n    integrationSource(analyticsStub)\n    integrationCtr = integrationSource.Integration\n  } else {\n    integrationCtr = integrationSource\n  }\n\n  const integration = new integrationCtr(integrationSettings)\n  integration.analytics = analyticsInstance\n  return integration\n}\n\nexport async function loadIntegration(\n  ctx: Context,\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<ClassicIntegrationSource> {\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(pathName, obfuscate)\n  const path = getNextIntegrationsURL()\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  try {\n    await loadScript(fullPath)\n    recordLoadMetrics(fullPath, ctx, name)\n  } catch (err) {\n    ctx.stats.gauge('legacy_destination_time', -1, [`plugin:${name}`, `failed`])\n    throw err\n  }\n\n  // @ts-ignore\n  const deps: string[] = window[`${pathName}Deps`]\n  await Promise.all(deps.map((dep) => loadScript(path + dep + '.gz')))\n\n  // @ts-ignore\n  window[`${pathName}Loader`]()\n\n  return window[\n    // @ts-ignore\n    `${pathName}Integration`\n  ] as ClassicIntegrationSource\n}\n\nexport async function unloadIntegration(\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<void> {\n  const path = getNextIntegrationsURL()\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(name, obfuscate)\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  return unloadScript(fullPath)\n}\n\nexport function resolveVersion(\n  integrationConfig?: RemoteIntegrationSettings\n): string {\n  return (\n    integrationConfig?.versionSettings?.override ??\n    integrationConfig?.versionSettings?.version ??\n    'latest'\n  )\n}\n","import { RemoteIntegrationSettings } from '../..'\nimport { IntegrationsInitOptions } from '../../browser/settings'\n\nexport const isInstallableIntegration = (\n  name: string,\n  integrationSettings: RemoteIntegrationSettings\n) => {\n  const { type, bundlingStatus, versionSettings } = integrationSettings\n  // We use `!== 'unbundled'` (versus `=== 'bundled'`) to be inclusive of\n  // destinations without a defined value for `bundlingStatus`\n  const deviceMode =\n    bundlingStatus !== 'unbundled' &&\n    (type === 'browser' || versionSettings?.componentTypes?.includes('browser'))\n\n  // checking for iterable is a quick fix we need in place to prevent\n  // errors showing Iterable as a failed destiantion. Ideally, we should\n  // fix the Iterable metadata instead, but that's a longer process.\n  return !name.startsWith('Segment') && name !== 'Iterable' && deviceMode\n}\n\nexport const isDisabledIntegration = (\n  integrationName: string,\n  integrations: IntegrationsInitOptions\n) => {\n  const allDisableAndNotDefined =\n    integrations.All === false && integrations[integrationName] === undefined\n\n  return integrations[integrationName] === false || allDisableAndNotDefined\n}\n","import { JSONObject } from '../../core/events'\nimport { Alias, Facade, Group, Identify, Page, Track } from '@segment/facade'\nimport { Analytics, InitOptions } from '../../core/analytics'\nimport { CDNSettings } from '../../browser'\nimport { isOffline, isOnline } from '../../core/connection'\nimport { Context, ContextCancelation } from '../../core/context'\nimport { isServer } from '../../core/environment'\nimport { InternalPluginWithAddMiddleware, Plugin } from '../../core/plugin'\nimport { attempt } from '@segment/analytics-core'\nimport { isPlanEventEnabled } from '../../lib/is-plan-event-enabled'\nimport { mergedOptions } from '../../lib/merged-options'\nimport { pWhile } from '../../lib/p-while'\nimport { PriorityQueue } from '../../lib/priority-queue'\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted'\nimport {\n  applyDestinationMiddleware,\n  DestinationMiddlewareFunction,\n} from '../middleware'\nimport {\n  buildIntegration,\n  loadIntegration,\n  resolveIntegrationNameFromSource,\n  resolveVersion,\n  unloadIntegration,\n} from './loader'\nimport { LegacyIntegration, ClassicIntegrationSource } from './types'\nimport { isPlainObject } from '@segment/analytics-core'\nimport {\n  isDisabledIntegration as shouldSkipIntegration,\n  isInstallableIntegration,\n} from './utils'\nimport { recordIntegrationMetric } from '../../core/stats/metric-helpers'\nimport { createDeferred } from '@segment/analytics-generic-utils'\nimport { IntegrationsInitOptions } from '../../browser/settings'\n\nexport type ClassType<T> = new (...args: unknown[]) => T\n\nasync function flushQueue(\n  xt: Plugin,\n  queue: PriorityQueue<Context>\n): Promise<PriorityQueue<Context>> {\n  const failedQueue: Context[] = []\n\n  if (isOffline()) {\n    return queue\n  }\n\n  await pWhile(\n    () => queue.length > 0 && isOnline(),\n    async () => {\n      const ctx = queue.pop()\n      if (!ctx) {\n        return\n      }\n\n      const result = await attempt(ctx, xt)\n      const success = result instanceof Context\n      if (!success) {\n        failedQueue.push(ctx)\n      }\n    }\n  )\n\n  // re-add failed tasks\n  failedQueue.map((failed) => queue.pushWithBackoff(failed))\n  return queue\n}\n\nexport class LegacyDestination implements InternalPluginWithAddMiddleware {\n  name: string\n  version: string\n  settings: JSONObject\n  options: InitOptions = {}\n  readonly type = 'destination'\n  middleware: DestinationMiddlewareFunction[] = []\n\n  private _ready: boolean | undefined\n  private _initialized: boolean | undefined\n  private onReady: Promise<unknown> | undefined\n  private initializePromise = createDeferred<boolean>()\n  private disableAutoISOConversion: boolean\n\n  integrationSource?: ClassicIntegrationSource\n  integration: LegacyIntegration | undefined\n\n  buffer: PriorityQueue<Context>\n  flushing = false\n\n  constructor(\n    name: string,\n    version: string,\n    writeKey: string,\n    settings: JSONObject = {},\n    options: InitOptions,\n    integrationSource?: ClassicIntegrationSource\n  ) {\n    this.name = name\n    this.version = version\n    this.settings = { ...settings }\n    this.disableAutoISOConversion = options.disableAutoISOConversion || false\n    this.integrationSource = integrationSource\n\n    // AJS-Renderer sets an extraneous `type` setting that clobbers\n    // existing type defaults. We need to remove it if it's present\n    if (this.settings['type'] && this.settings['type'] === 'browser') {\n      delete this.settings['type']\n    }\n\n    this.initializePromise.promise.then(\n      (isInitialized) => (this._initialized = isInitialized),\n      () => {}\n    )\n\n    this.options = options\n    this.buffer = options.disableClientPersistence\n      ? new PriorityQueue(4, [])\n      : new PersistedPriorityQueue(4, `${writeKey}:dest-${name}`)\n\n    this.scheduleFlush()\n  }\n\n  isLoaded(): boolean {\n    return !!this._ready\n  }\n\n  ready(): Promise<unknown> {\n    return this.initializePromise.promise.then(\n      () => this.onReady ?? Promise.resolve()\n    )\n  }\n\n  async load(ctx: Context, analyticsInstance: Analytics): Promise<void> {\n    if (this._ready || this.onReady !== undefined) {\n      return\n    }\n\n    const integrationSource =\n      this.integrationSource ??\n      (await loadIntegration(\n        ctx,\n        this.name,\n        this.version,\n        this.options.obfuscate\n      ))\n\n    this.integration = buildIntegration(\n      integrationSource,\n      this.settings,\n      analyticsInstance\n    )\n\n    this.onReady = new Promise((resolve) => {\n      const onReadyFn = (): void => {\n        this._ready = true\n        resolve(true)\n      }\n\n      this.integration!.once('ready', onReadyFn)\n    })\n\n    this.integration!.on('initialize', () => {\n      this.initializePromise.resolve(true)\n    })\n\n    try {\n      recordIntegrationMetric(ctx, {\n        integrationName: this.name,\n        methodName: 'initialize',\n        type: 'classic',\n      })\n      this.integration.initialize()\n    } catch (error) {\n      recordIntegrationMetric(ctx, {\n        integrationName: this.name,\n        methodName: 'initialize',\n        type: 'classic',\n        didError: true,\n      })\n      this.initializePromise.resolve(false)\n      throw error\n    }\n  }\n\n  unload(_ctx: Context, _analyticsInstance: Analytics): Promise<void> {\n    return unloadIntegration(this.name, this.version, this.options.obfuscate)\n  }\n\n  addMiddleware(...fn: DestinationMiddlewareFunction[]): void {\n    this.middleware = this.middleware.concat(...fn)\n  }\n\n  shouldBuffer(ctx: Context): boolean {\n    return (\n      // page events can't be buffered because of destinations that automatically add page views\n      ctx.event.type !== 'page' &&\n      (isOffline() || this._ready !== true || this._initialized !== true)\n    )\n  }\n\n  private async send<T extends Facade>(\n    ctx: Context,\n    clz: ClassType<T>,\n    eventType: 'track' | 'identify' | 'page' | 'alias' | 'group'\n  ): Promise<Context> {\n    if (this.shouldBuffer(ctx)) {\n      this.buffer.push(ctx)\n      this.scheduleFlush()\n      return ctx\n    }\n\n    const plan = this.options?.plan?.track\n    const ev = ctx.event.event\n\n    if (plan && ev && this.name !== 'Segment.io') {\n      // events are always sent to segment (legacy behavior)\n      const planEvent = plan[ev]\n      if (!isPlanEventEnabled(plan, planEvent)) {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          All: false,\n          'Segment.io': true,\n        })\n        ctx.cancel(\n          new ContextCancelation({\n            retry: false,\n            reason: `Event ${ev} disabled for integration ${this.name} in tracking plan`,\n            type: 'Dropped by plan',\n          })\n        )\n      } else {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          ...planEvent?.integrations,\n        })\n      }\n\n      if (planEvent?.enabled && planEvent?.integrations![this.name] === false) {\n        ctx.cancel(\n          new ContextCancelation({\n            retry: false,\n            reason: `Event ${ev} disabled for integration ${this.name} in tracking plan`,\n            type: 'Dropped by plan',\n          })\n        )\n      }\n    }\n\n    const afterMiddleware = await applyDestinationMiddleware(\n      this.name,\n      ctx.event,\n      this.middleware\n    )\n\n    if (afterMiddleware === null) {\n      return ctx\n    }\n\n    const event = new clz(afterMiddleware, {\n      traverse: !this.disableAutoISOConversion,\n    })\n\n    recordIntegrationMetric(ctx, {\n      integrationName: this.name,\n      methodName: eventType,\n      type: 'classic',\n    })\n\n    try {\n      if (this.integration) {\n        await this.integration!.invoke.call(this.integration, eventType, event)\n      }\n    } catch (err) {\n      recordIntegrationMetric(ctx, {\n        integrationName: this.name,\n        methodName: eventType,\n        type: 'classic',\n        didError: true,\n      })\n      throw err\n    }\n\n    return ctx\n  }\n\n  async track(ctx: Context): Promise<Context> {\n    return this.send(ctx, Track as ClassType<Track>, 'track')\n  }\n\n  async page(ctx: Context): Promise<Context> {\n    if (this.integration?._assumesPageview && !this._initialized) {\n      this.integration.initialize()\n    }\n\n    await this.initializePromise.promise\n    return this.send(ctx, Page as ClassType<Page>, 'page')\n  }\n\n  async identify(ctx: Context): Promise<Context> {\n    return this.send(ctx, Identify as ClassType<Identify>, 'identify')\n  }\n\n  async alias(ctx: Context): Promise<Context> {\n    return this.send(ctx, Alias as ClassType<Alias>, 'alias')\n  }\n\n  async group(ctx: Context): Promise<Context> {\n    return this.send(ctx, Group as ClassType<Group>, 'group')\n  }\n\n  private scheduleFlush(): void {\n    if (this.flushing) {\n      return\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      if (isOffline() || this._ready !== true || this._initialized !== true) {\n        this.scheduleFlush()\n        return\n      }\n\n      this.flushing = true\n      this.buffer = await flushQueue(this, this.buffer)\n      this.flushing = false\n\n      if (this.buffer.todo > 0) {\n        this.scheduleFlush()\n      }\n    }, Math.random() * 5000)\n  }\n}\n\nexport function ajsDestinations(\n  writeKey: string,\n  settings: CDNSettings,\n  integrations: IntegrationsInitOptions = {},\n  options: InitOptions = {},\n  routingMiddleware?: DestinationMiddlewareFunction,\n  legacyIntegrationSources?: ClassicIntegrationSource[]\n): LegacyDestination[] {\n  if (isServer()) {\n    return []\n  }\n\n  if (settings.plan) {\n    options = options ?? {}\n    options.plan = settings.plan\n  }\n\n  const routingRules = settings.middlewareSettings?.routingRules ?? []\n  const remoteIntegrationsConfig = settings.integrations\n  const localIntegrationsConfig = options.integrations\n  // merged remote CDN settings with user provided options\n  const integrationOptions = mergedOptions(settings, options ?? {}) as Record<\n    string,\n    JSONObject\n  >\n\n  const adhocIntegrationSources = legacyIntegrationSources?.reduce(\n    (acc, integrationSource) => ({\n      ...acc,\n      [resolveIntegrationNameFromSource(integrationSource)]: integrationSource,\n    }),\n    {} as Record<string, ClassicIntegrationSource>\n  )\n\n  const installableIntegrations = new Set([\n    // Remotely configured installable integrations\n    ...Object.keys(remoteIntegrationsConfig).filter((name) =>\n      isInstallableIntegration(name, remoteIntegrationsConfig[name])\n    ),\n\n    // Directly provided integration sources are only installable if settings for them are available\n    ...Object.keys(adhocIntegrationSources || {}).filter(\n      (name) =>\n        isPlainObject(remoteIntegrationsConfig[name]) ||\n        isPlainObject(localIntegrationsConfig?.[name])\n    ),\n  ])\n\n  return Array.from(installableIntegrations)\n    .filter((name) => !shouldSkipIntegration(name, integrations))\n    .map((name) => {\n      const integrationSettings = remoteIntegrationsConfig[name]\n      const version = resolveVersion(integrationSettings)\n      const destination = new LegacyDestination(\n        name,\n        version,\n        writeKey,\n        integrationOptions[name],\n        options,\n        adhocIntegrationSources?.[name]\n      )\n\n      const routing = routingRules.filter(\n        (rule) => rule.destinationName === name\n      )\n      if (routing.length > 0 && routingMiddleware) {\n        destination.addMiddleware(routingMiddleware)\n      }\n\n      return destination\n    })\n}\n","import { PlanEvent, TrackPlan } from '../core/events/interfaces'\n\n/**\n * Determines whether a track event is allowed to be sent based on the\n * user's tracking plan.\n * If the user does not have a tracking plan or the event is allowed based\n * on the tracking plan configuration, returns true.\n */\nexport function isPlanEventEnabled(\n  plan: TrackPlan | undefined,\n  planEvent: PlanEvent | undefined\n): boolean {\n  // Always prioritize the event's `enabled` status\n  if (typeof planEvent?.enabled === 'boolean') {\n    return planEvent.enabled\n  }\n\n  // Assume absence of a tracking plan means events are enabled\n  return plan?.__default?.enabled ?? true\n}\n"],"names":["normalizeName","name","toLowerCase","replace","obfuscatePathName","pathName","obfuscate","btoa","undefined","loadIntegration","ctx","version","obfuscatedPathName","path","getNextIntegrationsURL","fullPath","concat","loadScript","_a","sent","metric","_b","window","performance","getEntriesByName","stats","gauge","Math","round","duration","__spreadArray","_","recordLoadMetrics","err_1","deps","Promise","all","map","dep","isInstallableIntegration","integrationSettings","type","bundlingStatus","versionSettings","deviceMode","componentTypes","includes","startsWith","isDisabledIntegration","integrationName","integrations","allDisableAndNotDefined","All","flushQueue","xt","queue","failedQueue","isOffline","pWhile","length","isOnline","__awaiter","_this","pop","attempt","result","Context","push","failed","pushWithBackoff","LegacyDestination","writeKey","settings","options","integrationSource","middleware","initializePromise","createDeferred","flushing","this","__assign","disableAutoISOConversion","promise","then","isInitialized","_initialized","buffer","disableClientPersistence","PriorityQueue","PersistedPriorityQueue","scheduleFlush","prototype","isLoaded","_ready","ready","onReady","resolve","load","analyticsInstance","_c","integration","integrationCtr","user","addIntegration","Integration","analytics","buildIntegration","once","on","recordIntegrationMetric","methodName","initialize","error","didError","unload","_ctx","_analyticsInstance","unloadScript","unloadIntegration","addMiddleware","fn","_i","arguments","apply","shouldBuffer","event","send","clz","eventType","plan","track","ev","planEvent","isPlanEventEnabled","updateEvent","cancel","ContextCancelation","retry","reason","enabled","applyDestinationMiddleware","afterMiddleware","traverse","invoke","call","Track","page","_assumesPageview","Page","identify","Identify","alias","Alias","group","Group","setTimeout","todo","random","ajsDestinations","routingMiddleware","legacyIntegrationSources","isServer","routingRules","middlewareSettings","remoteIntegrationsConfig","localIntegrationsConfig","integrationOptions","mergedOptions","adhocIntegrationSources","reduce","acc","resolveIntegrationNameFromSource","installableIntegrations","Set","Object","keys","filter","isPlainObject","Array","from","shouldSkipIntegration","integrationConfig","_d","override","resolveVersion","destination","rule","destinationName","__default"],"sourceRoot":""}